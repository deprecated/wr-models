* Preparing WR models for use with Cloudy
+ Models are Potsdam Wolf Rayet - PoWR
  + website: http://www.astro.physik.uni-potsdam.de/~wrh/PoWR/powrgrid1.html
** Make the .ascii file from the individual model files
:LOGBOOK:  
CLOCK: [2015-03-28 Sat 18:31]--[2015-03-28 Sat 19:39] =>  1:08
:END:      
+ We are using just 3 models from grid
  + WR-6-14
  + WR-10-16
  + WR-12-18
+ We will use a parameter =WRmodel= with values 1, 2, 3
+ We are following the instructions in Appendix B of Hazy1
  + [[file:~/Work/CLOUDY/git-svn/docs/latex/hazy1/hazy1.pdf][Local PDF link]]

#+BEGIN_SRC python :return outfilename :results file
  import numpy as np
  import textwrap

  modelnames = 'WR-6-14', 'WR-10-16', 'WR-12-18'
  outfilename = 'powr-models.ascii'

  output = ''
  output += '{magicnumber}'.format(magicnumber=20060612) + '\n'
  output += '{ndim}'.format(ndim=1) + '\n'
  output += '{npar}'.format(npar=1) + '\n'
  output += '{label}'.format(label='age') + '\n'
  output += '{nmod}'.format(nmod=len(modelnames)) + '\n'
  output += '{nfreq}'.format(nfreq=852) + '\n'
  output += 'lambda' + '\n'
  output += '1.0' + '\n'
  output += 'F_lambda' + '\n'
  output += '1.0' + '\n'
  output += '1.0 2.0 3.0' + '\n'


  SMALL_FLOAT = 1.e-30
  wavelengths = None
  for mn in modelnames:
      sedfile = mn + '/sed.txt'
      log_wavs, log_fluxes = np.loadtxt(sedfile, unpack=True)
      wavs = 10**log_wavs
      fluxes = 10**log_fluxes
      fluxes = np.maximum(SMALL_FLOAT, fluxes)
      if wavelengths is None:
          wavelengths = wavs
          s = ' '.join(['{:.6e}'.format(x) for x in wavelengths])
          output += textwrap.fill(s) + '\n'
      else:
          assert np.alltrue(wavs == wavelengths)
      s = ' '.join(['{:.6e}'.format(x) for x in fluxes])
      output += textwrap.fill(s) + '\n'
      
  with open(outfilename, 'w') as f:
      f.write(output)
#+END_SRC

#+RESULTS:
[[file:powr-models.ascii]]

** Compile the models for use with Cloudy
:LOGBOOK:  
CLOCK: [2015-03-28 Sat 19:39]--[2015-03-29 Sun 00:19] =>  4:40
:END:      

Following instructions from http://www.nublado.org/wiki/StellarAtmospheres
: compile stars "<yourname.ascii>"

#+BEGIN_SRC sh :results output
CLOUDY=$HOME/Work/CLOUDY/git-svn
cp powr-models.ascii $CLOUDY/data
#+END_SRC

#+RESULTS:



* Modeling the shocks around WR nebulae

We want to find:
1. The prompt [O III] emission from behind the shock
   - But we need to remember that there may be a contribution from the ionization zone
2. The cooling distance between the [O III] and Ha emission


** First check with H II region models
The abundances are not right, but should be qualitatively right

|          T |       Cool | [O III] 5007 frac |  [O III] cool | log O++ | y(O++) |
|------------+------------+-------------------+---------------+---------+--------|
| 1.0000e+04 | 6.3647e-20 |         0.3761765 | 2.3942506e-20 | -0.0275 |  0.939 |
| 1.5849e+04 | 1.4004e-19 |         0.4245906 | 5.9459668e-20 | -0.0217 |  0.951 |
| 2.5119e+04 | 3.6443e-19 |         0.2726052 | 9.9345513e-20 | -0.0197 |  0.956 |
| 3.9811e+04 | 9.3416e-19 |         0.1355412 | 1.2661717e-19 | -0.0203 |  0.954 |
| 6.3096e+04 | 2.2727e-18 |         0.0612704 | 1.3924924e-19 | -0.0093 |  0.979 |
| 7.9433e+04 | 3.9010e-18 |         0.0321346 | 1.2535707e-19 | -0.0417 |  0.908 |
#+TBLFM: $4=$-1 $-2::$6=10**$-1;f3
+ So total [O III] peaks at around 63,000 K
  + But it is a broad peak - more or less constant from 40,000 to 80,000 K
  + Unfortunately, [O III] is no longer in the top 5 coolants fot T > 80,000 K so we lose track of its value
+ The cooling rates are in erg/s/cm^3, assuming a density of 100 pcc
  + So the \Lambda is 1e4 times smaller
+ Note that O is still over 90% O++ at 80,000 K
  + The ion fraction then falls precipitously between 1e5 K (0.68) and 2e5 K (0.04)


** Compare with the real WR models
:PROPERTIES:
:noweb:    yes
:END:

*** Plot cooling functions
#+name: cool-read-func
#+BEGIN_SRC python
  def get_cooltable(logphi=10.0, logn=0.0, star='wr136'):
      cooldir = os.path.join('JaneCloudy', star.upper() + 'COOL')
      templ = 'coolfunc-photo-{}-phi{:.2f}-ngc6888-n{:.2f}.dat'
      coolfile = templ.format(star, logphi, logn)
      return Table.read(os.path.join(cooldir, coolfile),
                        format='ascii.commented_header', delimiter='\t')
#+END_SRC

#+BEGIN_SRC python :return pltfile :results file
  import os
  from matplotlib import pyplot as plt
  from astropy.table import Table
  import seaborn as sns
  <<cool-read-func>>
  fig, ax = plt.subplots(1, 1)
  pltfile = 'wr-coolfunc.pdf'
  for logphi in 9.0, 10.0, 11.0:
      for logn in 0.0, 1.0, 2.0:
          label = 'phi {:.0f}, n {:.0f}'.format(logphi, logn)
          t = get_cooltable(logphi, logn)
          with sns.color_palette("Set2", 9):
              ax.loglog(t['Temperature'], t['Lambda (erg cm3/s)'], '-', label=label)

  ax.legend(loc='lower right', ncol=3)
  fig.savefig(pltfile)
#+END_SRC

#+RESULTS:0
[[file:wr-coolfunc.pdf]]


**** Calculate table of cooling lengths from real cooling function
+ To start with we will assume that T_0 = T_2 and n_2 = 100 pcc
  + [ ] But really we shoud have T_0 = 11,000 K and T_2 = 8000 K

+ Total particle density = n(H) + n(He) + n(e) = n(H) [(1 + yHe) + xH + yHe (xHe+ + 2 xHe++)]
+ Mass density = \rho = m_p [n(H) + 4 n(He)] = (1 + 4 yHe) m_p n(H)
  + or (1 + 3 yHe) m_p n_nuc
+ Now assume xHe++ = 0
  + n_tot = ((1 + xH) + yHe (1 + xHe)) n(H) => P = ((1 + xH) + yHe (1 + xHe)) n(H) k T
  + c^2 = P / \rho = ((1 + xH) + yHe (1 + xHe)) k T / (1 + 4 yHe) m_p 
#+name: cooling-zone-models
#+BEGIN_SRC python :return outtab
  import os
  import numpy as np
  from scipy import interpolate
  from astropy.table import Table

  k = 1.3806503e-16                         # Boltzmann's constant [cgs]
  mp = 1.67262158e-24                       # Proton rest mass [cgs]
  yHe = 0.162                               # He/H abundance
  xHeplus = 1.0                             # He is all singly ionized
  xH = 1.0                                  # H is all ionized
  mu = 1.0 + 3.0*yHe                        # Mean mass per nucleon
  gamma = 5./3.                             # adiabatic index
  yr = 3.15576e7                            # Year in seconds
  pc = 3.085677582e18                       # Parsec in cm

  <<cool-read-func>>

  tab = get_cooltable()

  fLambda = interpolate.interp1d(tab['Temperature'], tab['Lambda (erg cm3/s)'])

  # Density of equilibrium shocked shell n2 = M^2 n0
  n2 = 100.0

  # Equilibrium photoionized temperature before shock
  T0 = 1.e4
  # pre-shock isothermal sound speed
  c0 = np.sqrt((1 + xH + yHe*(1 + xHeplus))*k*T0/((1 + 4*yHe)*mp))  # should be 10.8 km/s

  # Equilibrium photoionized temperature in cool shell
  T2 = T0                         

  outtab = [['M0', 'Ushock, km/s', 'v1, km/s', 'n0', 'n1', 'n2', 'T1', 'dcool, pc', 'tcool, yr'], None]

  for n0 in [3.0, 2.5, 2.0, 1.75, 1.5, 1.25, 1.0, 0.75, 0.5]:
      # Mach number
      M0 = np.sqrt(n2/n0)
      # Immediate post-shock density
      n1 = n0 * 4.0 / (1.0 + 3.0/M0**2)
      # Immediate post-shock temperature
      T1 = T0 * (1./16.) * (5*M0**2 - 1.) * (1. + (3/M0**2))
      # Immediate post-shock cooling coefficient
      Lambda1 = fLambda(T1)
      # Immediate post shock velocity (by continuity: M0 c0 n0 = v1 n1)
      v1 = M0*c0*n0/n1
      # Immediate post-shock pressure
      P1 = (1 + xH + yHe*(1 + xHeplus))*n1*k*T1
      # Immediate post-shock radiative energy loss per volume
      L1 = Lambda1*n1**2
      # Finally the cooling distance
      tcool = P1/((gamma - 1.)*L1)
      dcool = v1*tcool

      outtab.append(['{:.3g}'.format(x) for x in [M0, M0*c0/1e5, v1/1e5, n0, n1, n2, T1, dcool/pc, tcool/yr]])

#+END_SRC

#+RESULTS: cooling-zone-models
|   M0 | Ushock, km/s | v1, km/s |   n0 |   n1 |  n2 |       T1 | dcool, pc | tcool, yr |
|------+--------------+----------+------+------+-----+----------+-----------+-----------|
| 5.77 |         62.3 |       17 |    3 |   11 | 100 | 1.13e+05 |   0.00401 |       231 |
| 6.32 |         68.2 |     18.3 |  2.5 |  9.3 | 100 | 1.34e+05 |   0.00766 |       408 |
| 7.07 |         76.3 |     20.2 |    2 | 7.55 | 100 | 1.65e+05 |    0.0167 |       808 |
| 7.56 |         81.6 |     21.5 | 1.75 | 6.65 | 100 | 1.87e+05 |    0.0279 |  1.27e+03 |
| 8.16 |         88.1 |       23 |  1.5 | 5.74 | 100 | 2.17e+05 |    0.0518 |   2.2e+03 |
| 8.94 |         96.5 |       25 | 1.25 | 4.82 | 100 | 2.59e+05 |     0.114 |  4.46e+03 |
|   10 |          108 |     27.8 |    1 | 3.88 | 100 | 3.21e+05 |     0.322 |  1.13e+04 |
| 11.5 |          125 |     31.8 | 0.75 | 2.93 | 100 | 4.25e+05 |      1.19 |  3.65e+04 |
| 14.1 |          153 |     38.7 |  0.5 | 1.97 | 100 | 6.34e+05 |      5.18 |  1.31e+05 |




**** Cooling zone behind shock
***** Plane parallel steady state flow from blackboard notes
:LOGBOOK:  
CLOCK: [2015-05-22 Fri 16:27]--[2015-05-23 Sat 02:27] => 10:00
:END:      
+ Initial equations
  + \(\rho v = \Phi_{0} \equiv \rho_{1} v_{1}\)
  + \(\rho \, (a^{2} + v^2) = \Pi_{0} \equiv \rho_{1} a_{1}^{2} \, (1 + M_{1}^{2})\)
  + \(\frac52 \rho v a^{2} \, (1 + \frac15 M^{2}) = \Epsilon_{0} - \int L\, dx\)
    + where \(\Epsilon_{0} \equiv \frac52 \rho_{1} v_{1} a_{1}^{2 }\, (1 + \frac15 M_{1}^{2})\)
+ Can be boiled down to
  1. \( (1 + M^{2}) \, a^{2}/v = \Pi_{0}/\Phi_{0} = (1 + M_{1}^{2}) \, a_{1}^{2}/v_{1} = (1 + M_{0}^{-2}) \, v_{0}\)
     + This is how velocity varies with soundspeed
     + For subsonic limit (\(M^{2} \ll 1\)) it is effectively \(v \propto a^{2}\).  If the particle mass is not changing (constant ionization) then this is \(v \propto T\)
  2. \(a^{2} \, (1 + \frac15 M^{2}) = a_{1}^{2} \left( 1 + \frac15 M_{1}^{2} - \frac32 \int \mathcal{L} \, ds \right)\)
     + This is how the sound speed (or Temperature) varies with distance
     + Where \(\mathcal{L} = L / L_{1} \) is dimensionless cooling function
     + \( s = x / h\) is dimensionless distance in terms of the cooling length: \(h = \frac35 \rho_{1} a_{1}^{2} v_{1} / L_{1} \)
     + And the immediate post-shock cooling function is \(L_{1} = n_{1}^{2} \Lambda(T_{1})\)
****** Try to solve the subsonic-limit case and with power law cooling func
+ Assume \(\Lambda = \Lambda_1 (T/T_1)^a \), where \(a \approx -1\) for 10^5 to 10^6 K
+ So first equation gives \( v/v_1 = T/T_1 \) and \( n/n_1 = T_1/T \)
  + => \(\mathcal{L} = (n/n_1)^2 (T/T_1)^a = (T/T_1)^{a-2 }\)
+ And second equation gives
  + \(\tau = 1 - 1.5 \int \tau{}^{a-2 }\, ds\)
  + where \(\tau \equiv T/T_1 \) is the dimensionless temperature
  + Differentiating: \( d\tau/ds = -1.5 \tau{}^{a-2 }\)
    + => \( \int_1^\tau \tau^{2-a}\, d\tau = -1.5 \int_0^s ds \)
    + => \( (\tau^{3-a} - 1) / (3-a) = -1.5 s \)
    + => \( \tau = (1 - 1.5 (3-a) s)^{1/(3-a)} \)
  + For example, with \(a = -1\)
    + \( \tau = (1 - 6 s)^{1/4 }\)
  + For example, with \(a = +2\)
    + \( \tau = 1 - 1.5 s\)
        
#+name: cooling-shell
#+BEGIN_SRC python :results output 
####+BEGIN_SRC python :results file :return pltfile
import numpy as np
from matplotlib import pyplot as plt
pltfile = 'cooling-shell.pdf'
fig, ax = plt.subplots(1, 1)
s = np.linspace(0, 0.167, 500)
a = -1
tau = (1.0 - 1.5*(3 - a)*s)**(1./(3 - a))
print(tau)
rho = np.nanmin(tau)/tau
print(rho)
ax.plot(s, tau)
ax.plot(s, rho)
ax.set_ylim(0, 1)
fig.savefig(pltfile)
#+END_SRC

#+RESULTS: cooling-shell
#+begin_example
[ 1.          0.99949762  0.99899448  0.99849057  0.99798591  0.99748047
  0.99697427  0.9964673   0.99595955  0.99545102  0.99494171  0.99443162
  0.99392074  0.99340907  0.99289661  0.99238336  0.99186931  0.99135446
  0.9908388   0.99032234  0.98980507  0.98928699  0.98876809  0.98824837
  0.98772784  0.98720648  0.98668429  0.98616127  0.98563741  0.98511272
  0.9845872   0.98406082  0.9835336   0.98300554  0.98247662  0.98194684
  0.98141621  0.98088471  0.98035235  0.97981912  0.97928502  0.97875004
  0.97821418  0.97767744  0.97713982  0.97660131  0.9760619   0.9755216
  0.9749804   0.9744383   0.97389529  0.97335137  0.97280654  0.97226079
  0.97171412  0.97116652  0.970618    0.97006855  0.96951816  0.96896683
  0.96841456  0.96786134  0.96730718  0.96675206  0.96619598  0.96563894
  0.96508093  0.96452195  0.963962    0.96340108  0.96283917  0.96227627
  0.96171239  0.96114751  0.96058164  0.96001476  0.95944688  0.95887798
  0.95830808  0.95773715  0.9571652   0.95659223  0.95601822  0.95544318
  0.95486709  0.95428996  0.95371179  0.95313256  0.95255227  0.95197092
  0.9513885   0.95080501  0.95022044  0.9496348   0.94904807  0.94846024
  0.94787133  0.94728131  0.94669019  0.94609796  0.94550461  0.94491015
  0.94431456  0.94371784  0.94311999  0.942521    0.94192086  0.94131958
  0.94071714  0.94011354  0.93950878  0.93890285  0.93829574  0.93768745
  0.93707797  0.9364673   0.93585544  0.93524237  0.9346281   0.93401261
  0.9333959   0.93277797  0.93215881  0.93153841  0.93091677  0.93029388
  0.92966974  0.92904434  0.92841767  0.92778973  0.92716051  0.92653001
  0.92589822  0.92526513  0.92463075  0.92399505  0.92335804  0.9227197
  0.92208004  0.92143905  0.92079672  0.92015303  0.919508    0.9188616
  0.91821384  0.9175647   0.91691418  0.91626228  0.91560898  0.91495428
  0.91429817  0.91364065  0.9129817   0.91232132  0.91165951  0.91099625
  0.91033154  0.90966537  0.90899773  0.90832862  0.90765802  0.90698594
  0.90631236  0.90563728  0.90496068  0.90428256  0.90360291  0.90292172
  0.90223899  0.90155471  0.90086886  0.90018145  0.89949245  0.89880187
  0.89810969  0.89741591  0.89672052  0.8960235   0.89532486  0.89462457
  0.89392264  0.89321905  0.89251379  0.89180686  0.89109824  0.89038793
  0.88967591  0.88896218  0.88824673  0.88752954  0.88681061  0.88608993
  0.88536748  0.88464326  0.88391726  0.88318947  0.88245987  0.88172846
  0.88099522  0.88026015  0.87952323  0.87878445  0.87804381  0.87730129
  0.87655688  0.87581056  0.87506234  0.87431218  0.8735601   0.87280606
  0.87205007  0.8712921   0.87053216  0.86977021  0.86900626  0.86824029
  0.86747228  0.86670223  0.86593013  0.86515595  0.86437969  0.86360133
  0.86282086  0.86203826  0.86125353  0.86046665  0.85967761  0.85888638
  0.85809296  0.85729734  0.85649949  0.85569941  0.85489708  0.85409248
  0.8532856   0.85247643  0.85166494  0.85085113  0.85003498  0.84921647
  0.84839559  0.84757231  0.84674663  0.84591853  0.84508799  0.84425499
  0.84341952  0.84258156  0.84174109  0.8408981   0.84005256  0.83920447
  0.83835379  0.83750052  0.83664463  0.8357861   0.83492493  0.83406107
  0.83319453  0.83232527  0.83145329  0.83057855  0.82970103  0.82882073
  0.82793761  0.82705165  0.82616284  0.82527115  0.82437657  0.82347905
  0.8225786   0.82167518  0.82076877  0.81985934  0.81894688  0.81803136
  0.81711276  0.81619104  0.81526619  0.81433819  0.813407    0.8124726
  0.81153497  0.81059407  0.80964989  0.8087024   0.80775156  0.80679735
  0.80583974  0.80487871  0.80391422  0.80294625  0.80197477  0.80099974
  0.80002114  0.79903893  0.79805309  0.79706358  0.79607037  0.79507343
  0.79407273  0.79306823  0.79205989  0.7910477   0.7900316   0.78901156
  0.78798756  0.78695954  0.78592748  0.78489134  0.78385108  0.78280666
  0.78175805  0.78070519  0.77964806  0.77858662  0.77752081  0.7764506
  0.77537595  0.77429682  0.77321315  0.7721249   0.77103204  0.7699345
  0.76883226  0.76772525  0.76661343  0.76549676  0.76437518  0.76324863
  0.76211708  0.76098046  0.75983873  0.75869183  0.7575397   0.75638229
  0.75521955  0.75405141  0.75287781  0.7516987   0.75051402  0.7493237
  0.74812768  0.74692589  0.74571828  0.74450477  0.7432853   0.74205979
  0.74082819  0.73959041  0.73834638  0.73709604  0.7358393   0.73457608
  0.73330632  0.73202992  0.73074682  0.72945692  0.72816014  0.72685639
  0.72554559  0.72422765  0.72290247  0.72156996  0.72023003  0.71888259
  0.71752752  0.71616473  0.71479411  0.71341557  0.71202898  0.71063425
  0.70923126  0.70781989  0.70640003  0.70497156  0.70353435  0.70208827
  0.70063321  0.69916902  0.69769558  0.69621274  0.69472036  0.69321831
  0.69170642  0.69018456  0.68865257  0.68711028  0.68555753  0.68399416
  0.68242     0.68083487  0.67923859  0.67763097  0.67601183  0.67438097
  0.6727382   0.6710833   0.66941606  0.66773628  0.66604372  0.66433815
  0.66261935  0.66088707  0.65914106  0.65738107  0.65560682  0.65381805
  0.65201447  0.65019581  0.64836175  0.646512    0.64464623  0.64276412
  0.64086533  0.63894951  0.6370163   0.63506532  0.6330962   0.63110853
  0.62910191  0.62707589  0.62503005  0.62296391  0.62087701  0.61876886
  0.61663893  0.6144867   0.61231161  0.6101131   0.60789056  0.60564336
  0.60337088  0.60107242  0.59874729  0.59639475  0.59401404  0.59160435
  0.58916485  0.58669467  0.58419289  0.58165854  0.57909063  0.5764881
  0.57384983  0.57117467  0.56846138  0.56570867  0.56291518  0.56007948
  0.55720003  0.55427524  0.5513034   0.54828271  0.54521126  0.54208699
  0.53890776  0.53567124  0.53237497  0.52901631  0.52559243  0.5221003
  0.51853665  0.51489798  0.51118049  0.50738008  0.5034923   0.49951231
  0.49543485  0.49125416  0.48696391  0.48255719  0.47802631  0.47336281
  0.46855725  0.46359911  0.45847659  0.45317637  0.44768337  0.44198039
  0.4360477   0.42986246  0.42339807  0.41662325  0.4095008   0.40198604
  0.39402449  0.3855488   0.37647412  0.36669127  0.35605612  0.34437229
  0.33136133  0.31660732  0.29944364  0.27868686  0.25186382  0.21189678
  0.05320958         nan]
[ 0.05320958  0.05323633  0.05326314  0.05329002  0.05331697  0.05334399
  0.05337107  0.05339822  0.05342545  0.05345274  0.0534801   0.05350753
  0.05353504  0.05356261  0.05359026  0.05361797  0.05364576  0.05367362
  0.05370155  0.05372956  0.05375764  0.05378579  0.05381402  0.05384232
  0.05387069  0.05389914  0.05392767  0.05395627  0.05398495  0.0540137
  0.05404253  0.05407144  0.05410042  0.05412949  0.05415863  0.05418785
  0.05421714  0.05424652  0.05427598  0.05430552  0.05433514  0.05436483
  0.05439461  0.05442448  0.05445442  0.05448445  0.05451456  0.05454475
  0.05457503  0.05460539  0.05463584  0.05466637  0.05469698  0.05472769
  0.05475848  0.05478935  0.05482031  0.05485136  0.0548825   0.05491373
  0.05494505  0.05497645  0.05500795  0.05503954  0.05507121  0.05510298
  0.05513484  0.05516679  0.05519884  0.05523098  0.05526321  0.05529554
  0.05532796  0.05536048  0.05539309  0.0554258   0.0554586   0.05549151
  0.05552451  0.05555761  0.0555908   0.0556241   0.0556575   0.055691
  0.0557246   0.0557583   0.0557921   0.05582601  0.05586001  0.05589413
  0.05592834  0.05596267  0.05599709  0.05603163  0.05606627  0.05610102
  0.05613587  0.05617084  0.05620591  0.05624109  0.05627639  0.05631179
  0.05634731  0.05638294  0.05641868  0.05645453  0.0564905   0.05652659
  0.05656279  0.0565991   0.05663554  0.05667209  0.05670876  0.05674554
  0.05678245  0.05681948  0.05685663  0.0568939   0.05693129  0.05696881
  0.05700645  0.05704421  0.0570821   0.05712012  0.05715826  0.05719653
  0.05723493  0.05727346  0.05731212  0.05735091  0.05738983  0.05742888
  0.05746807  0.05750739  0.05754685  0.05758644  0.05762617  0.05766603
  0.05770604  0.05774618  0.05778646  0.05782689  0.05786745  0.05790816
  0.05794901  0.05799001  0.05803115  0.05807244  0.05811387  0.05815546
  0.05819719  0.05823907  0.05828111  0.05832329  0.05836563  0.05840813
  0.05845077  0.05849358  0.05853654  0.05857966  0.05862294  0.05866638
  0.05870998  0.05875375  0.05879767  0.05884177  0.05888603  0.05893045
  0.05897504  0.05901981  0.05906474  0.05910984  0.05915512  0.05920057
  0.0592462   0.059292    0.05933798  0.05938414  0.05943048  0.059477
  0.0595237   0.05957059  0.05961766  0.05966492  0.05971237  0.05976
  0.05980783  0.05985585  0.05990406  0.05995247  0.06000107  0.06004987
  0.06009887  0.06014807  0.06019747  0.06024708  0.06029689  0.06034691
  0.06039713  0.06044757  0.06049821  0.06054907  0.06060015  0.06065144
  0.06070294  0.06075467  0.06080662  0.06085879  0.06091119  0.06096381
  0.06101666  0.06106974  0.06112305  0.0611766   0.06123038  0.0612844
  0.06133866  0.06139315  0.0614479   0.06150288  0.06155811  0.0616136
  0.06166933  0.06172532  0.06178156  0.06183805  0.06189481  0.06195183
  0.06200911  0.06206666  0.06212448  0.06218256  0.06224092  0.06229956
  0.06235847  0.06241766  0.06247713  0.06253689  0.06259693  0.06265727
  0.06271789  0.06277881  0.06284003  0.06290155  0.06296337  0.06302549
  0.06308792  0.06315066  0.06321372  0.06327709  0.06334078  0.06340479
  0.06346913  0.06353379  0.06359879  0.06366412  0.06372978  0.06379579
  0.06386214  0.06392883  0.06399588  0.06406328  0.06413103  0.06419915
  0.06426762  0.06433647  0.06440568  0.06447527  0.06454524  0.06461559
  0.06468632  0.06475744  0.06482896  0.06490087  0.06497318  0.0650459
  0.06511902  0.06519256  0.06526652  0.06534089  0.06541569  0.06549093
  0.06556659  0.0656427   0.06571925  0.06579625  0.0658737   0.06595161
  0.06602998  0.06610882  0.06618814  0.06626793  0.0663482   0.06642897
  0.06651022  0.06659198  0.06667424  0.06675701  0.0668403   0.06692411
  0.06700845  0.06709332  0.06717874  0.0672647   0.06735121  0.06743828
  0.06752592  0.06761413  0.06770292  0.06779229  0.06788226  0.06797283
  0.06806401  0.0681558   0.06824821  0.06834125  0.06843493  0.06852926
  0.06862424  0.06871988  0.06881619  0.06891318  0.06901086  0.06910923
  0.06920831  0.06930811  0.06940862  0.06950987  0.06961187  0.06971461
  0.06981812  0.0699224   0.07002747  0.07013333  0.07023999  0.07034747
  0.07045578  0.07056493  0.07067493  0.07078579  0.07089752  0.07101014
  0.07112367  0.0712381   0.07135347  0.07146977  0.07158703  0.07170525
  0.07182446  0.07194466  0.07206588  0.07218813  0.07231142  0.07243577
  0.0725612   0.07268772  0.07281535  0.07294411  0.07307401  0.07320509
  0.07333734  0.0734708   0.07360548  0.07374141  0.0738786   0.07401707
  0.07415685  0.07429797  0.07444043  0.07458428  0.07472952  0.07487619
  0.07502431  0.0751739   0.075325    0.07547763  0.07563182  0.0757876
  0.07594499  0.07610404  0.07626476  0.07642719  0.07659137  0.07675733
  0.0769251   0.07709472  0.07726622  0.07743966  0.07761505  0.07779245
  0.0779719   0.07815344  0.0783371   0.07852295  0.07871102  0.07890137
  0.07909404  0.07928909  0.07948657  0.07968653  0.07988903  0.08009413
  0.08030189  0.08051237  0.08072564  0.08094176  0.08116082  0.08138286
  0.08160798  0.08183625  0.08206774  0.08230255  0.08254075  0.08278244
  0.08302772  0.08327666  0.08352939  0.083786    0.0840466   0.0843113
  0.08458023  0.0848535   0.08513124  0.08541359  0.08570068  0.08599267
  0.08628969  0.08659192  0.08689952  0.08721266  0.08753152  0.0878563
  0.08818719  0.08852441  0.08886818  0.08921873  0.08957631  0.08994116
  0.09031357  0.09069382  0.09108222  0.09147907  0.09188473  0.09229954
  0.09272388  0.09315816  0.09360281  0.09405828  0.09452505  0.09500363
  0.09549458  0.09599849  0.09651597  0.09704771  0.09759443  0.09815691
  0.09873598  0.09933254  0.09994757  0.10058212  0.10123735  0.10191449
  0.10261489  0.10334005  0.10409158  0.10487125  0.10568103  0.10652307
  0.10739976  0.10831376  0.10926802  0.11026586  0.11131099  0.11240761
  0.11356047  0.11477499  0.11605736  0.11741474  0.11885539  0.12038901
  0.12202698  0.12378281  0.12567271  0.12771631  0.12993768  0.13236675
  0.13504131  0.13800998  0.14133663  0.14510731  0.14944156  0.1545118
  0.16057874  0.16806176  0.17769482  0.19092965  0.21126331  0.25111086
  1.                 nan]
#+end_example

#+RESULTS:
[[file:cooling-shell.pdf]]
****** Use real cooling function instead
:LOGBOOK:  
CLOCK: [2015-05-25 Mon 09:52]--[2015-05-25 Mon 12:33] =>  2:41
:END:      
+ This is an attempt to reconstruct this from memory since I had an emacs disaster last night and lost all my work for the last two days
+ First equation is the same
+ Second equation is \(T / T_{1} = 1 - 1.5 \int (\Lambda / \Lambda_{1})(T_{1}^{2}/T^{2})\, ds\)
  + Differentiating: \((1/T_{1}) dT/ds = -1.5 (\Lambda / \Lambda_{1})(T_{1}^{2}/T^{2}) \)
  + => \(s = \frac23 (\Lambda_{1}/T_{1}^{3}) \, \int_{T}^{T_{1}} (T^{2} / \Lambda) \, dT\)
+ Note that the following needs to be run in python 3
#+name: cooling-shell-table
#+header: :var models=cooling-zone-models
#+BEGIN_SRC python :return pltfile :results file
  import os
  import numpy as np
  from scipy import interpolate, optimize, integrate
  from astropy.table import Table
  from matplotlib import pyplot as plt
  import seaborn as sns

  <<cool-read-func>>

  # Set up cooling function
  tab = get_cooltable()
  T_tab = tab['Temperature']
  Lambda_tab = (tab['L (erg/cm3/s)'] - tab['H (erg/cm3/s)'])/(tab['Np']*tab['Ne'])
  fLambda = interpolate.interp1d(T_tab, Lambda_tab)

  # Calculate integral on finer grid
  integrand_tab = T_tab**2 / Lambda_tab
  fIntegrand = interpolate.interp1d(T_tab, integrand_tab)

  # Equilibrium T where heating = cooling
  Teq = optimize.fsolve(fLambda, 1e4)
  # Go up to 1e6 K
  logThi = 6.0
  # And down to just above equilibrium T
  logTlo = np.log10(1.001*Teq)
  ngrid = 50
  T_grid = np.logspace(logTlo, logThi, ngrid)

  Lambda_grid = fLambda(T_grid)
  # integrand_grid = fIntegrand(T_grid)

  # Don't interpolate the integrand - rather recalculate it from the
  # interpolated T and Lambda
  integrand_grid = T_grid**2 / Lambda_grid
  integral_grid = integrate.cumtrapz(integrand_grid, T_grid, initial=0.0)
  fIntegral = interpolate.interp1d(T_grid, integral_grid)

  # Set up graph for temperature and density
  pltfile = 'cooling-shell-new-n100.pdf'
  fig, (axtop, axbot) = plt.subplots(2, 1, sharex=True)

  # Loop over all the shock velocities
  for row in models:
      M0, u0, v1, n0, n1, N2, T1, dcool, tcool = [float(x) for x in row]
      label = 'Vs = {:.0f} km/s'.format(u0)
      mask = T_grid < T1
      T = T_grid[mask][::-1]
      s = (2./3.)*(fLambda(T1)/T1**3)*(fIntegral(T1) - integral_grid[mask][::-1])
      x = np.hstack([[-0.05, 0.0, 0.0], dcool*s]) 
      axtop.semilogy(x, np.hstack([[Teq, Teq, T1], T]))
      den = n1*T1/T
      axbot.semilogy(x, np.hstack([[n0, n0, n1], den]), label=label)

  axtop.set_ylim(9000, 1.1e6)
  axbot.set_ylim(0.3, 200.0)
  axbot.set_xlabel('Distance, pc')
  axbot.set_ylabel('Density, pcc')
  axtop.set_ylabel('Temperature, K')
  axbot.legend(ncol=3, fontsize='x-small', loc='upper center')
  fig.savefig(pltfile)

  #return list(zip(T_grid, Lambda_grid, integrand_grid, integral_grid))


#+END_SRC

#+RESULTS: cooling-shell-table
[[file:cooling-shell-new-n100.pdf]]

      


****** Relation of isothermal sound speed and temperature:
  + \rho a^2 = n_tot k T
  + \rho = m_p n_H (1 + 4 y_He)
  + n_tot = n_H (1 + x_H + y_He (1 + x_He + 2 x_HeII))
  + => a^2 = (k / \mu m_p) T
    + where \mu = (1 + 4 y_He) / (1 + x_H + y_He (1 + x_He + 2 x_HeII))
  + Table of \mu values
    |   y_He |  x_H | x_He |  \mu |
    |-------+-----+-----+------|
    |   0.1 | 0.0 | 0.0 | 1.27 |
    |   0.1 | 1.0 | 0.0 | 0.67 |
    |   0.1 | 1.0 | 1.0 | 0.64 |
    |-------+-----+-----+------|
    | 0.162 | 0.0 | 0.0 | 1.42 |
    | 0.162 | 1.0 | 0.0 | 0.76 |
    | 0.162 | 1.0 | 1.0 | 0.71 |
    #+TBLFM: $4=(1 + 4 $1)/(1 + $2 + $1 (1 + $3));f2

** Second, look at the post-shock temperatures and cooling lengths
*** Table copied from llobjects.org
#+TBLNAME: post-shock-quantities
|   |     M0 |    M1 | n1/n0 |   T1/T0 |   n2/n0 | v1/c0 | v2/c0 |   h/R | delta |   n3/n0 |      dcfac |
| ! |     M0 |    M1 | n1/n0 |   T1/T0 |   n2/n0 | v1/c0 | v2/c0 |   h/R | delta |   n3/n0 |      dcfac |
|---+--------+-------+-------+---------+---------+-------+-------+-------+-------+---------+------------|
| # |    1.1 | 0.913 | 1.150 |   1.098 |   1.210 | 0.957 | 0.909 | 0.249 | 0.413 |   1.710 |  6.5131174 |
| # |    1.2 | 0.846 | 1.297 |   1.195 |   1.440 | 0.925 | 0.833 | 0.223 | 0.347 |   1.940 |  3.2648273 |
| # |    1.3 | 0.793 | 1.441 |   1.292 |   1.690 | 0.902 | 0.769 | 0.201 | 0.296 |   2.190 |  2.2066838 |
| # |    1.4 | 0.751 | 1.581 |   1.392 |   1.960 | 0.886 | 0.714 | 0.183 | 0.255 |   2.460 |  1.6836548 |
| # |    1.5 | 0.716 | 1.714 |   1.495 |   2.250 | 0.875 | 0.667 | 0.167 | 0.222 |   2.750 |  1.3793454 |
| # |   1.75 | 0.651 | 2.021 |   1.771 |   3.063 | 0.866 | 0.571 | 0.135 | 0.163 |   3.562 | 0.99266615 |
| # |    2.0 | 0.607 | 2.286 |   2.078 |   4.000 | 0.875 | 0.500 | 0.112 | 0.125 |   4.500 | 0.81763300 |
| # |    2.5 | 0.553 | 2.703 |   2.798 |   6.250 | 0.925 | 0.400 | 0.081 | 0.080 |   6.750 | 0.66908037 |
| # |    3.0 | 0.522 | 3.000 |   3.667 |   9.000 | 1.000 | 0.333 | 0.061 | 0.055 |   9.495 | 0.61547510 |
| # |    3.5 | 0.503 | 3.213 |   4.688 |  12.250 | 1.089 | 0.286 | 0.048 | 0.041 |  12.752 | 0.59706849 |
| # |    4.0 | 0.490 | 3.368 |   5.863 |  16.000 | 1.188 | 0.250 | 0.038 | 0.031 |  16.496 | 0.59396864 |
| # |    4.5 | 0.482 | 3.484 |   7.194 |  20.250 | 1.292 | 0.222 | 0.031 | 0.025 |  20.756 | 0.59832061 |
| # |      5 | 0.475 | 3.571 |   8.680 |      25 | 1.400 | 0.200 | 0.026 | 0.020 |  25.500 | 0.60649545 |
| # |    5.5 | 0.470 | 3.639 |  10.322 |  30.250 | 1.511 | 0.182 | 0.022 | 0.017 |  30.764 | 0.61724921 |
| # |      6 | 0.467 | 3.692 |  12.120 |      36 | 1.625 | 0.167 | 0.019 | 0.014 |  36.504 | 0.78990383 |
| # |    6.5 | 0.464 | 3.735 |  14.074 |  42.250 | 1.740 | 0.154 | 0.016 | 0.012 |  42.757 |  1.3213623 |
| # |      7 | 0.462 | 3.769 |  16.184 |      49 | 1.857 | 0.143 | 0.014 | 0.010 |  49.490 |  2.1404393 |
| # |      8 | 0.458 | 3.821 |  20.872 |      64 | 2.094 | 0.125 | 0.011 | 0.008 |  64.512 |  5.1698640 |
| # |      9 | 0.456 | 3.857 |  26.185 |      81 | 2.333 | 0.111 | 0.009 | 0.006 |  81.486 |  11.364212 |
| # |     10 | 0.454 | 3.883 |  32.123 |     100 | 2.575 | 0.100 | 0.007 | 0.005 | 100.500 |  23.171930 |
| # |     12 | 0.452 | 3.918 |  45.874 |     144 | 3.063 | 0.083 | 0.005 | 0.003 | 144.432 |  80.435950 |
| # |     15 | 0.450 | 3.947 |  71.187 |     225 | 3.800 | 0.067 | 0.003 | 0.002 | 225.450 |  375.55751 |
| # |   20.0 | 0.449 | 3.970 | 125.875 | 400.000 | 5.038 | 0.050 | 0.002 | 0.001 | 400.400 |  2801.1414 |
| # | 22.334 | 0.449 | 3.976 | 156.752 | 498.808 | 5.617 | 0.045 | 0.001 | 0.001 | 499.307 |  6095.8903 |
#+TBLFM: $3=sqrt(($M0**2 + 3) / (5 $M0**2 - 1)) ; f3::$4=4 / (1 + 3/$M0**2) ; f3::$5=(1/16) (5 $M0**2 - 1) (1 + (3/$M0**2)) ; f3::$6=$M0**2 ; f3::$7=$M0/$4;f3::$8=$M0 /$6 ; f3::$9=(3 / 4 $M0**2) (2 / (1 + sqrt(1 + (18/$M0**2)) )) ; f3::$10=0.5 $8**2 ; f3::$11=(1 + $delta) $6 ; f3::$12=$7 $5 $11 / $4 (min(3000/$5, $5**2.3) - 1)

+ And here is the [[/Users/will/Dropbox/Org/shock-quantities.pdf][graph]] of these quantities
+ The =dcfac= is proportional to the cooling length and is calculated as 
  : $12=$7 $5 $11 / $4 (min(3000/$5, $5**2.3) - 1)
  which is what? Considered in detail in the following section. 

*** Calculating the cooling length

**** Cooling length equations
+ Cooling time: \(t_{\mathrm{cool}} = P / (\gamma - 1) L \), where \(P \simeq 2 n_{1} k T_{1}\) and \(L = n_{1}^{2} \Lambda(T_{1})\)
+ Cooling length: \(d_{\mathrm{cool}} =  t_{\mathrm{cool}} v_{1} = 3 v_{1} k T_{1} / n_{1}  \Lambda(T_{1}) \)
+ In the LL Ori notes I rewrote this in terms of the post-shock density:
  + What we measure is n2, so we can write n1 = n2 (n1/n0) / (n2/n0)
  + dcool = 3 (v1/c0) c0 k (T1/T0) T0 (n2/n0) / n2 (n1/n0) Lam0 [(T1/T0)^a - 1]
  + dcool = (3 c0 k T0 / n2 Lam0) (v1/c0) (T1/T0) (n2/n0) / (n1/n0) [(T1/T0)^a - 1]
  + dcool = dcool0 dcfac
    + dcool0 = (3 c0 k T0 / n2 Lam0)
      + [X] /Revisited:/ [2011-10-05 Wed] Assume the following revised variables:
  + T0 = 8700 K
  + n2 = 3500 pcc (as measured from Ha brightness for nose)
  + Lam0 = 2.7e-24 (calculated from [[file:~/Work/Bowshocks/LLobjects/Cloudy/out/LL1-thin-Dfar-n3.6-WM38.cool][cloudy emissivity file]])
  + m c0^2 = 2 k T0 => c = sqrt(2 k T0 / m) = 10.5 km/s
    + => dcool0 = 4.0e14 cm = 26.8 AU = 0.062 arcsec
  + Old value was 7.53e14 cm = 50.3404211798 AU = 0.12 arcsec
    + dcfac = (v1/c0) (T1/T0) (n2/n0) / (n1/n0) [(T1/T0)^a - 1]
+ For NGC 6888, Moore2000a estimate n_2 = 100 pcc
  + Assume T = 1e4 K => c0 = 11.25 km/s
  + => dcool0 = 1.72e16 cm
  + With a shock velocity of 93 km/s, we have M = 8.266
    + => dcfac = 6 or so => dcool = 1.032e17 = 0.033 pc
    + @ D = 1.45 kpc this is 4.75 arcsec
  + This would correspond to n_0 = 100 / 8.266**2 = 1.46 pcc


**** Variations with n_0
+ Assume that driving pressure is constant so that M^2 n_0 is constant:

|   n_0 |      M |    V_s | dcfac | d_cool (arcsec) |
|------+--------+-------+-------+----------------|
| 1.46 |  8.266 |  93.0 |     6 |                |
|  1.0 |  9.988 | 112.4 |    23 |                |
|  0.5 | 14.125 | 158.9 |   300 |                |
|  0.2 | 22.334 | 251.3 |  6095 |                |
#+TBLFM: $2=8.266/sqrt($1/@I$1);f3::$3=11.25 $-1 ;f1

+ These get large very quickly, since we are in the T^-1 portion of the cooling curve

**** Cooling length table copied from llobjects.org
#+name: shell-thickness-arcsec
#+begin_src python :var tab=post-shock-quantities
  import numpy
  R = 2.5                                 # stand-off radius in arcsec
  dcool0 = 0.062                           # fiduciary cooling length in arcsec
  data = numpy.array([row[1:] for row in tab])
  m0 = data[:,0]
  h = R*data[:,7]
  dcool = dcool0*data[:,10]

  def F(a, fmt="%.2f"):
      return [fmt % (x) for x in a]

  return [["M0", "h", "dcool", "h + dc"], None] + zip(F(m0), F(h), F(dcool), F(h+dcool))
#+end_src

#+results: shell-thickness-arcsec
|    M0 |    h |  dcool | h + dc |
|  1.10 | 0.62 |   0.40 |   1.03 |
|  1.20 | 0.56 |   0.20 |   0.76 |
|  1.30 | 0.50 |   0.14 |   0.64 |
|  1.40 | 0.46 |   0.10 |   0.56 |
|  1.50 | 0.42 |   0.09 |   0.50 |
|  1.75 | 0.34 |   0.06 |   0.40 |
|  2.00 | 0.28 |   0.05 |   0.33 |
|  2.50 | 0.20 |   0.04 |   0.24 |
|  3.00 | 0.15 |   0.04 |   0.19 |
|  3.50 | 0.12 |   0.04 |   0.16 |
|  4.00 | 0.10 |   0.04 |   0.13 |
|  4.50 | 0.08 |   0.04 |   0.11 |
|  5.00 | 0.07 |   0.04 |   0.10 |
|  5.50 | 0.05 |   0.04 |   0.09 |
|  6.00 | 0.05 |   0.05 |   0.10 |
|  6.50 | 0.04 |   0.08 |   0.12 |
|  7.00 | 0.04 |   0.13 |   0.17 |
|  8.00 | 0.03 |   0.32 |   0.35 |
|  9.00 | 0.02 |   0.70 |   0.73 |
| 10.00 | 0.02 |   1.44 |   1.45 |
| 12.00 | 0.01 |   4.99 |   5.00 |
| 15.00 | 0.01 |  23.28 |  23.29 |
| 20.00 | 0.01 | 173.67 | 173.67 |

And [[/Users/will/Dropbox/Org/shell-thickness.pdf][here]] is the corresponding graph of the shell thickness as a function of Mach number, assuming that \(R = 2.5''\) and \(n_{3} = 2000 \mathrm{cm^{-3}}\). 
